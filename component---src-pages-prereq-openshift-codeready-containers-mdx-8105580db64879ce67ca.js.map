{"version":3,"file":"component---src-pages-prereq-openshift-codeready-containers-mdx-8105580db64879ce67ca.js","mappings":"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","sources":["webpack://spm-kubernetes/./src/pages/prereq/openshift/codeready-containers.mdx","webpack://spm-kubernetes/./node_modules/gatsby-theme-carbon/src/components/PageHeader/index.js","webpack://spm-kubernetes/./node_modules/gatsby-theme-carbon/src/components/PageHeader/PageHeader.js","webpack://spm-kubernetes/./node_modules/gatsby-theme-carbon/src/components/PageHeader/PageHeader.module.scss","webpack://spm-kubernetes/./node_modules/gatsby-theme-carbon/src/components/EditLink/index.js","webpack://spm-kubernetes/./node_modules/gatsby-theme-carbon/src/components/EditLink/EditLink.js","webpack://spm-kubernetes/./node_modules/gatsby-theme-carbon/src/components/EditLink/EditLink.module.scss","webpack://spm-kubernetes/./node_modules/gatsby-theme-carbon/src/components/PageTabs/PageTabs.js","webpack://spm-kubernetes/./node_modules/gatsby-theme-carbon/src/components/PageTabs/PageTabs.module.scss","webpack://spm-kubernetes/./node_modules/gatsby-theme-carbon/src/components/PageTabs/index.js","webpack://spm-kubernetes/./node_modules/gatsby-theme-carbon/src/components/LastModifiedDate/index.js","webpack://spm-kubernetes/./node_modules/gatsby-theme-carbon/src/components/LastModifiedDate/LastModifiedDate.js","webpack://spm-kubernetes/./node_modules/gatsby-theme-carbon/src/components/LastModifiedDate/last-modified-date.module.scss","webpack://spm-kubernetes/./node_modules/gatsby-theme-carbon/src/templates/Default.js"],"sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\n\nimport DefaultLayout from \"/home/travis/build/IBM/spm-kubernetes/node_modules/gatsby-theme-carbon/src/templates/Default.js\";\nexport const _frontmatter = {};\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\n\nconst InlineNotification = makeShortcode(\"InlineNotification\");\nconst Tabs = makeShortcode(\"Tabs\");\nconst Tab = makeShortcode(\"Tab\");\nconst Row = makeShortcode(\"Row\");\nconst Column = makeShortcode(\"Column\");\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h2>{`What is CRC?`}</h2>\n    <p>{`CodeReady Containers (CRC) is a minimal, preconfigured OpenShift cluster that is designed to run on your local workstation as a development environment for OpenShift.\nFor more information, see `}<a parentName=\"p\" {...{\n        \"href\": \"https://github.com/code-ready/crc\"\n      }}>{`CodeReady Containers`}</a>{`.`}</p>\n    <p>{`Similar to Minikube in concept, CRC provides a cloud like environment locally to create and deploy an OpenShift cluster for development and testing purposes.`}</p>\n    <p>{`This page covers some common CRC operations, including deploying IBM® Cúram Social Program Management (SPM) to the CRC environment. You will use the helm charts produced in `}<a parentName=\"p\" {...{\n        \"href\": \"/spm-kubernetes/deployment/hc_deployment\"\n      }}>{`Preparing Helm charts`}</a>{`.`}</p>\n    <p>{`For a full getting started guide for CRC, see `}<a parentName=\"p\" {...{\n        \"href\": \"https://access.redhat.com/documentation/en-us/red_hat_codeready_containers/1.23/html/getting_started_guide/index\"\n      }}>{`Getting Started Guide CodeReady Containers`}</a></p>\n    <h3>{`Minimum System requirements`}</h3>\n    <p>{`CodeReady Containers system requirements can be found here: `}<a parentName=\"p\" {...{\n        \"href\": \"https://code-ready.github.io/crc/#minimum-system-requirements_gsg\"\n      }}>{`CRC Minimum system requirements`}</a>{`.`}</p>\n    <InlineNotification mdxType=\"InlineNotification\">\n      <p>{`There is a known CRC `}<a parentName=\"p\" {...{\n          \"href\": \"https://github.com/code-ready/crc/issues/557\"\n        }}>{`issue`}</a>{` with respect to resource usage. When deploying SPM on CRC our experience has shown that a minimum of 16GB will improve performance, however 32GB is optimal.`}</p>\n    </InlineNotification>\n    <InlineNotification kind=\"warning\" mdxType=\"InlineNotification\">\n      <p>{`Red Hat CodeReady Containers only supports platform-native virtualization technologies:`}</p>\n      <ul>\n        <li parentName=\"ul\">{`Hyper-V on Windows`}</li>\n        <li parentName=\"ul\">{`HyperKit on macOS`}</li>\n        <li parentName=\"ul\">{`libvirt on Linux`}</li>\n      </ul>\n      <p>{`Running CRC using nested virtualization is discouraged and not supported.`}</p>\n    </InlineNotification>\n    <h2>{`Installing CRC`}</h2>\n    <ul>\n      <li parentName=\"ul\">\n        <p parentName=\"li\">{`Create an account at `}<a parentName=\"p\" {...{\n            \"href\": \"https://www.redhat.com/\"\n          }}>{`RedHat Cloud`}</a>{`.`}</p>\n      </li>\n      <li parentName=\"ul\">\n        <p parentName=\"li\">{`Create a `}<inlineCode parentName=\"p\">{`$CRC_HOME`}</inlineCode>{` folder (e.g. `}<inlineCode parentName=\"p\">{`~/crc_home`}</inlineCode>{`) to use for the purposes of the installation.`}</p>\n      </li>\n      <li parentName=\"ul\">\n        <p parentName=\"li\">{`Download the installation archive from `}<a parentName=\"p\" {...{\n            \"href\": \"https://cloud.redhat.com/openshift/install/crc/installer-provisioned\"\n          }}>{`latest release`}</a>{` to `}<inlineCode parentName=\"p\">{`$CRC_HOME`}</inlineCode>{` and extract the archive:`}</p>\n        <pre parentName=\"li\"><code parentName=\"pre\" {...{\n            \"className\": \"language-shell\"\n          }}>{`tar -xvf crc-*-amd64.tar.xz\n`}</code></pre>\n      </li>\n      <li parentName=\"ul\">\n        <p parentName=\"li\">{`On the same page, download your pull secret to `}<inlineCode parentName=\"p\">{`$CRC_HOME`}</inlineCode>{`.`}</p>\n      </li>\n      <li parentName=\"ul\">\n        <p parentName=\"li\">{`Copy the `}<inlineCode parentName=\"p\">{`crc`}</inlineCode>{` binary to `}<inlineCode parentName=\"p\">{`/usr/local/bin/`}</inlineCode></p>\n        <pre parentName=\"li\"><code parentName=\"pre\" {...{\n            \"className\": \"language-shell\"\n          }}>{`sudo cp $CRC_HOME/crc-*-amd64/crc /usr/local/bin/\n`}</code></pre>\n      </li>\n    </ul>\n    <InlineNotification mdxType=\"InlineNotification\">\n      <p>{`Alternatively, you may add the extracted directory to the `}<inlineCode parentName=\"p\">{`$PATH`}</inlineCode>{` variable instead of moving the binary.`}</p>\n    </InlineNotification>\n    <p>{`Whichever option you choose, you should now have `}<inlineCode parentName=\"p\">{`crc`}</inlineCode>{` in your executable path. Verify by running the following command:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-shell\"\n      }}>{`crc version\n`}</code></pre>\n    <p>{`The output should be similar to the following:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-shell\"\n      }}>{`CodeReady Containers version: 1.23.1+be17b141\nOpenShift version: 4.7.0 (embedded in executable)\n`}</code></pre>\n    <h2>{`Setting up CRC`}</h2>\n    <p>{`The first step is to configure the prerequisites for the OpenShift cluster, including taking control of your hosts and resolver files to provide access to the CRC cluster.\nTo do this run the following command, providing the workstation administrator password as required.\nThis procedure also creates the `}<inlineCode parentName=\"p\">{`~/.crc`}</inlineCode>{` directory if it does not already exist.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-shell\"\n      }}>{`crc setup\n`}</code></pre>\n    <p>{`Now that the basic configuration is complete, you need to edit the configuration to change the memory limit and add the path to the pull secret file downloaded previously.`}</p>\n    <InlineNotification kind=\"warning\" mdxType=\"InlineNotification\">\n      <p><strong parentName=\"p\">{`Note:`}</strong>{` VPN clients can conflict with the network configuration for CodeReady Containers.\nIf you use a VPN client on the same environment as CRC, see the `}<a parentName=\"p\" {...{\n          \"href\": \"https://github.com/code-ready/crc/wiki/VPN-support--with-an--userland-network-stack\"\n        }}>{`VPN support`}</a>{` document in the CRC GitHub wiki.`}</p>\n    </InlineNotification>\n    <p>{`To change the memory limit, set the CPUs, and add the path to the pull secret file downloaded previously. Run the following commands:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-shell\"\n      }}>{`crc config set memory <number-in-MiB>\ncrc config set cpus <whole-number>\ncrc config set pull-secret-file $CRC_HOME/pull-secret.txt\n`}</code></pre>\n    <InlineNotification mdxType=\"InlineNotification\">\n      <p>{`CRC’s minimum memory allocation requirement is 8GB, only a single replica SPM deployment can be achieved using this.`}</p>\n      <p>{`You should allocate as many resources as are available.`}</p>\n      <p><strong parentName=\"p\">{`Note:`}</strong>{` Values for available memory are set in mebibytes (MiB). Below are some sample values.`}</p>\n      <p>{`Example memory values:`}</p>\n      <ul>\n        <li parentName=\"ul\">{`32768 (MiB) is equilivant to 34.4GB`}</li>\n        <li parentName=\"ul\">{`20480 (MiB) is equilivant to 21.5GB`}</li>\n        <li parentName=\"ul\">{`15120 (MiB) is equilivant to 15.9GB`}</li>\n      </ul>\n      <p><strong parentName=\"p\">{`Note:`}</strong>{` The greater the workload the greater the memory and processor requirements. Any changes to the CRC config require you to delete the cluster and start a new one.`}</p>\n      <p><strong parentName=\"p\">{`Note:`}</strong>{` CPU limits must not exceed the physical resources.`}</p>\n    </InlineNotification>\n    <p>{`You can always check the configured options of `}<inlineCode parentName=\"p\">{`crc`}</inlineCode>{`, run the following command:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-shell\"\n      }}>{`crc config view\n`}</code></pre>\n    <p>{`After setup is complete, start the cluster, run the following command:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-shell\"\n      }}>{`crc start\n`}</code></pre>\n    <p>{`This outputs something similar to the following:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-log\"\n      }}>{`INFO Checking if running as non-root\nINFO Checking minimum RAM requirements\nINFO Checking if Virtualization is enabled\n...\n...\nStarted the OpenShift cluster.\n\nThe server is accessible via web console at:\n  https://console-openshift-console.apps-crc.testing\n\nLog in as administrator:\n  Username: kubeadmin\n  Password: kubeadmin-password\n\nLog in as user:\n  Username: developer\n  Password: developer\n\nUse the 'oc' command line interface:\n  $ eval $(crc oc-env)\n  $ oc login -u developer https://api.crc.testing:6443\n`}</code></pre>\n    <p>{`Note the `}<inlineCode parentName=\"p\">{`kubeadmin`}</inlineCode>{` and `}<inlineCode parentName=\"p\">{`developer`}</inlineCode>{` credentials for later use.`}</p>\n    <InlineNotification mdxType=\"InlineNotification\">\n      <p>{`For convenience, you may set the `}<inlineCode parentName=\"p\">{`kubeadmin`}</inlineCode>{` user’s password as an environment variable:`}</p>\n      <pre><code parentName=\"pre\" {...{\n          \"className\": \"language-shell\"\n        }}>{`export KUBEADMN_PSW=kubeadmin-password\n`}</code></pre>\n      <p>{`In case you need to retrieve the password later, you can run `}<inlineCode parentName=\"p\">{`crc console --credentials`}</inlineCode>{`.`}</p>\n    </InlineNotification>\n    <p>{`Next, set up the OpenShift Client `}<inlineCode parentName=\"p\">{`oc`}</inlineCode>{`, which is used to administer the CRC cluster:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-shell\"\n      }}>{`eval $(crc oc-env)\n`}</code></pre>\n    <p>{`If required, you can stop the cluster:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-shell\"\n      }}>{`crc stop\n`}</code></pre>\n    <p>{`Or delete the cluster:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-shell\"\n      }}>{`crc delete\n`}</code></pre>\n    <h2>{`Creating a CRC project`}</h2>\n    <p>{`Create a project for the SPM deployment, again use an environment variable for your convenience when following the guide.`}</p>\n    <p>{`Create the environment variable, you can set to value to anything you like, but it should consist of lower case alphanumeric characters or `}<inlineCode parentName=\"p\">{`-`}</inlineCode>{`, and must start and end with an alphanumeric character (e.g. `}<inlineCode parentName=\"p\">{`my-name`}</inlineCode>{`,  or `}<inlineCode parentName=\"p\">{`123-abc`}</inlineCode>{`):`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-shell\"\n      }}>{`export PROJECT=\"ocp\"\n`}</code></pre>\n    <p>{`Log in as kubeadmin:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-shell\"\n      }}>{`oc login -u kubeadmin -p $KUBEADMN_PSW https://api.crc.testing:6443\n`}</code></pre>\n    <p>{`Create the project:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-shell\"\n      }}>{`oc new-project $PROJECT\n`}</code></pre>\n    <h2>{`Configuring the Image Registry`}</h2>\n    <p>{`CodeReady Containers comes with an internal image registry where you can store the application’s Docker images.`}</p>\n    <p>{`The registry is accessed using different URLs, depending on the use - pods use an internal registry service name, and a developer would use the public route to publish the images.`}</p>\n    <p>{`The registry URLs can be retrieved using the `}<inlineCode parentName=\"p\">{`oc registry info`}</inlineCode>{` command, with either a `}<inlineCode parentName=\"p\">{`--public`}</inlineCode>{` or `}<inlineCode parentName=\"p\">{`--internal`}</inlineCode>{` flag.`}</p>\n    <ul>\n      <li parentName=\"ul\">{`Public URL: `}<inlineCode parentName=\"li\">{`default-route-openshift-image-registry.apps-crc.testing`}</inlineCode>\n        <ul parentName=\"li\">\n          <li parentName=\"ul\">{`Use this when tagging and publishing images.`}</li>\n        </ul>\n      </li>\n      <li parentName=\"ul\">{`Internal URL: `}<inlineCode parentName=\"li\">{`image-registry.openshift-image-registry.svc:5000`}</inlineCode>\n        <ul parentName=\"li\">\n          <li parentName=\"ul\">{`Use this when deploying using Helm.`}</li>\n        </ul>\n      </li>\n    </ul>\n    <p>{`The public URL uses a certificate signed by the OpenShift internal CA, which Docker does not trust by default.`}</p>\n    <p>{`Docker loads all `}<inlineCode parentName=\"p\">{`*.crt`}</inlineCode>{` files under `}<inlineCode parentName=\"p\">{`/etc/docker/certs.d/<registryHost[:port]>`}</inlineCode>{` directories and uses them for verifying any self-signed certificates.`}</p>\n    <p>{`More information can be found in the Docker Documentation `}<a parentName=\"p\" {...{\n        \"href\": \"https://docs.docker.com/registry/insecure/#use-self-signed-certificates\"\n      }}>{`Use self-signed certificates`}</a>{`.`}</p>\n    <p>{`Enable Docker trust certificate:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-shell\"\n      }}>{`CERT_PATH=\"/etc/docker/certs.d/$(oc registry info --public)\"\nsudo mkdir -p $CERT_PATH\noc extract secret/router-ca -n openshift-ingress-operator --keys=tls.crt --confirm\nsudo cp tls.crt $CERT_PATH\n`}</code></pre>\n    <p>{`Log in to the OpenShift registry:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-shell\"\n      }}>{`docker login -u kubeadmin -p $(oc whoami -t) $(oc registry info --public)\n`}</code></pre>\n    <h2>{`Hostname configuration for CRC`}</h2>\n    <p>{`This runbook uses a generic hostname of `}<inlineCode parentName=\"p\">{`spm-ocp.apps-crc.testing`}</inlineCode>{` as an example in commands and the configuration files.`}</p>\n    <p>{`You should add the CRC IP address to the `}<inlineCode parentName=\"p\">{`hosts`}</inlineCode>{` file by using the generic hostname, or else modify the usage of `}<inlineCode parentName=\"p\">{`spm-ocp.apps-crc.testing`}</inlineCode>{` in this runbook to reflect your local hostname.`}</p>\n    <Tabs mdxType=\"Tabs\">\n      <Tab label=\"Mac/Linux\" mdxType=\"Tab\">\n        <Row mdxType=\"Row\">\n          <Column mdxType=\"Column\">\n            <pre><code parentName=\"pre\" {...{\n                \"className\": \"language-shell\"\n              }}>{`echo -e \"$(crc ip)\\\\tspm-ocp.apps-crc.testing\" | sudo tee -a /etc/hosts\n`}</code></pre>\n          </Column>\n        </Row>\n      </Tab>\n      <Tab label=\"Windows\" mdxType=\"Tab\">\n        <Row mdxType=\"Row\">\n          <Column mdxType=\"Column\">\n            <pre><code parentName=\"pre\" {...{\n                \"className\": \"language-powershell\"\n              }}>{`Add-Content -Path C:\\\\Windows\\\\System32\\\\drivers\\\\etc\\\\hosts -Value \"$(crc ip)\\`tspm-ocp.apps-crc.testing\" -Force\n`}</code></pre>\n          </Column>\n        </Row>\n      </Tab>\n    </Tabs>\n    <p>{`Where `}<inlineCode parentName=\"p\">{`crc ip`}</inlineCode>{` is the command that returns the CRC VM’s IP address that is accessible from your workstation.`}</p>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      ","import PageHeader from './PageHeader';\n\nexport default PageHeader;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport cx from 'classnames';\nimport * as styles from './PageHeader.module.scss';\n\nconst PageHeader = ({ title, theme, tabs = [] }) => (\n  <div\n    className={cx(styles.pageHeader, {\n      [styles.withTabs]: tabs.length,\n      [styles.darkMode]: theme === 'dark',\n    })}>\n    <div className=\"bx--grid\">\n      <div className=\"bx--row\">\n        <div className=\"bx--col-lg-12\">\n          <h1 id=\"page-title\" className={styles.text}>\n            {title}\n          </h1>\n        </div>\n      </div>\n    </div>\n  </div>\n);\n\nPageHeader.propTypes = {\n  /**\n   * Specify the title for the page\n   */\n  title: PropTypes.node,\n};\n\nexport default PageHeader;\n","// extracted by mini-css-extract-plugin\nexport var bxTextTruncateEnd = \"PageHeader-module--bx--text-truncate--end--379mx\";\nexport var bxTextTruncateFront = \"PageHeader-module--bx--text-truncate--front--2QE1Z\";\nexport var pageHeader = \"PageHeader-module--page-header--1JmOE\";\nexport var darkMode = \"PageHeader-module--dark-mode--aV7If\";\nexport var withTabs = \"PageHeader-module--with-tabs--ezlJE\";\nexport var text = \"PageHeader-module--text--J1--B\";","import EditLink from './EditLink';\n\nexport default EditLink;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { graphql, useStaticQuery } from 'gatsby';\n\nimport { link, row } from './EditLink.module.scss';\n\nconst EditLink = ({ relativePagePath, repository: repositoryProp }) => {\n  const {\n    site: {\n      siteMetadata: { repository },\n    },\n  } = useStaticQuery(graphql`\n    query REPOSITORY_QUERY {\n      site {\n        siteMetadata {\n          repository {\n            baseUrl\n            subDirectory\n            branch\n          }\n        }\n      }\n    }\n  `);\n\n  const { baseUrl, subDirectory, branch } = repositoryProp || repository;\n\n  const href = `${baseUrl}/edit/${branch}${subDirectory}/src/pages${relativePagePath}`;\n\n  return baseUrl ? (\n    <div className={`bx--row ${row}`}>\n      <div className=\"bx--col\">\n        <a className={link} href={href}>\n          Edit this page on GitHub\n        </a>\n      </div>\n    </div>\n  ) : null;\n};\n\nEditLink.propTypes = {\n  repository: PropTypes.shape({\n    baseUrl: PropTypes.string,\n    subDirectory: PropTypes.string,\n    branch: PropTypes.string,\n  }),\n  relativePagePath: PropTypes.string,\n};\n\nexport default EditLink;\n","// extracted by mini-css-extract-plugin\nexport var bxTextTruncateEnd = \"EditLink-module--bx--text-truncate--end--27F-D\";\nexport var bxTextTruncateFront = \"EditLink-module--bx--text-truncate--front--2eTgE\";\nexport var link = \"EditLink-module--link--t_pLX\";\nexport var row = \"EditLink-module--row--2vJiZ\";","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Link } from 'gatsby';\nimport slugify from 'slugify';\nimport cx from 'classnames';\n\nimport {\n  tabsContainer,\n  list,\n  selectedItem,\n  listItem,\n  link,\n} from './PageTabs.module.scss';\n\nexport default class PageTabs extends React.Component {\n  render() {\n    const { title, tabs, slug } = this.props;\n    const currentTab = slug.split('/').filter(Boolean).slice(-1)[0];\n\n    const pageTabs = tabs.map((tab) => {\n      const slugifiedTab = slugify(tab, { lower: true, strict: true });\n      const selected = slugifiedTab === currentTab;\n      // matches with or without trailing slash: /?\n      // matches with or without hash link: (#.*)?\n      const currentTabRegex = new RegExp(`${currentTab}/?(#.*)?$`);\n      const href = slug.replace(currentTabRegex, slugifiedTab);\n      return (\n        <li key={tab} className={cx({ [selectedItem]: selected }, listItem)}>\n          <Link className={link} to={`${href}`}>\n            {tab}\n          </Link>\n        </li>\n      );\n    });\n\n    return (\n      <div className={tabsContainer}>\n        <div className=\"bx--grid\">\n          <div className=\"bx--row\">\n            <div className=\"bx--col-lg-12 bx--col-no-gutter\">\n              <nav aria-label={title}>\n                <ul className={list}>{pageTabs}</ul>\n              </nav>\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nPageTabs.propTypes = {\n  tabs: PropTypes.array,\n  slug: PropTypes.string,\n};\n","// extracted by mini-css-extract-plugin\nexport var bxTextTruncateEnd = \"PageTabs-module--bx--text-truncate--end--36NdM\";\nexport var bxTextTruncateFront = \"PageTabs-module--bx--text-truncate--front--3IxF7\";\nexport var tabsContainer = \"PageTabs-module--tabs-container--18QsR\";\nexport var list = \"PageTabs-module--list--3gLeN\";\nexport var listItem = \"PageTabs-module--list-item--2X02I\";\nexport var link = \"PageTabs-module--link--2anNu\";\nexport var selectedItem = \"PageTabs-module--selected-item--3CjGa\";","import PageTabs from './PageTabs';\n\nexport default PageTabs;\n","import LastModifiedDate from './LastModifiedDate';\n\nexport default LastModifiedDate;\n","import React from 'react';\nimport { Row, Column } from '../Grid';\nimport * as styles from './last-modified-date.module.scss';\n\nconst LastModifiedDate = ({ date }) => {\n  const options = {\n    day: '2-digit',\n    year: 'numeric',\n    month: 'long',\n  };\n\n  const lastModified = new Date(date);\n\n  return date ? (\n    <Row className={styles.row}>\n      <Column>\n        <div className={styles.text}>\n          Page last updated: {lastModified.toLocaleDateString('en-GB', options)}\n          {/* // https://www-03preprod.ibm.com/support/knowledgecenter/ibm_style/dates-and-times.html */}\n        </div>\n      </Column>\n    </Row>\n  ) : null;\n};\nexport default LastModifiedDate;\n","// extracted by mini-css-extract-plugin\nexport var bxTextTruncateEnd = \"last-modified-date-module--bx--text-truncate--end--3sLO2\";\nexport var bxTextTruncateFront = \"last-modified-date-module--bx--text-truncate--front--3gAON\";\nexport var text = \"last-modified-date-module--text--1RmBx\";\nexport var row = \"last-modified-date-module--row--Bb0E9\";","import React from 'react';\nimport slugify from 'slugify';\nimport { useStaticQuery, graphql } from 'gatsby';\n\nimport Utils from '../components/Utils';\nimport Layout from '../components/Layout';\nimport PageHeader from '../components/PageHeader';\nimport EditLink from '../components/EditLink';\nimport NextPrevious from '../components/NextPrevious';\nimport PageTabs from '../components/PageTabs';\nimport Main from '../components/Main';\nimport useMetadata from '../util/hooks/useMetadata';\nimport LastModifiedDate from '../components/LastModifiedDate';\n\nconst Default = ({ pageContext, children, location, Title }) => {\n  const { frontmatter = {}, relativePagePath, titleType } = pageContext;\n  const {\n    tabs,\n    title,\n    theme: frontmatterTheme,\n    description,\n    keywords,\n    date,\n  } = frontmatter;\n\n  const { interiorTheme } = useMetadata();\n\n  // get the path prefix if it exists\n  const {\n    site: { pathPrefix },\n  } = useStaticQuery(graphql`\n    query PATH_PREFIX_QUERY {\n      site {\n        pathPrefix\n      }\n    }\n  `);\n\n  // let gatsby handle prefixing\n  const slug = pathPrefix\n    ? location.pathname.replace(pathPrefix, '')\n    : location.pathname;\n\n  const getCurrentTab = () => {\n    if (!tabs) return '';\n    return (\n      slug.split('/').filter(Boolean).slice(-1)[0] ||\n      slugify(tabs[0], { lower: true })\n    );\n  };\n\n  const currentTab = getCurrentTab();\n\n  const theme = frontmatterTheme || interiorTheme;\n\n  return (\n    <Layout\n      tabs={tabs}\n      homepage={false}\n      theme={theme}\n      pageTitle={title}\n      pageDescription={description}\n      pageKeywords={keywords}\n      titleType={titleType}>\n      <PageHeader\n        title={Title ? <Title /> : title}\n        label=\"label\"\n        tabs={tabs}\n        theme={theme}\n      />\n      {tabs && (\n        <PageTabs\n          title={title}\n          slug={slug}\n          tabs={tabs}\n          currentTab={currentTab}\n        />\n      )}\n      <Main padded>\n        {children}\n        <EditLink relativePagePath={relativePagePath} />\n        <LastModifiedDate date={date} />\n      </Main>\n      <NextPrevious\n        pageContext={pageContext}\n        location={location}\n        slug={slug}\n        tabs={tabs}\n        currentTab={currentTab}\n      />\n      <Utils />\n    </Layout>\n  );\n};\n\nexport default Default;\n"],"names":["_frontmatter","makeShortcode","name","props","console","warn","InlineNotification","Tabs","Tab","Row","Column","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","mdxType","parentName","kind","label","isMDXComponent","title","theme","tabs","className","cx","length","id","relativePagePath","repositoryProp","repository","useStaticQuery","site","siteMetadata","baseUrl","subDirectory","href","branch","PageTabs","render","this","slug","currentTab","split","filter","Boolean","slice","pageTabs","map","tab","slugifiedTab","slugify","lower","strict","selected","currentTabRegex","RegExp","replace","key","Link","to","React","date","lastModified","Date","toLocaleDateString","day","year","month","pageContext","children","location","Title","frontmatter","titleType","frontmatterTheme","description","keywords","interiorTheme","useMetadata","pathPrefix","pathname","Layout","homepage","pageTitle","pageDescription","pageKeywords","Main","padded","NextPrevious","Utils"],"sourceRoot":""}