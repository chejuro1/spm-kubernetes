{
    "componentChunkName": "component---src-pages-troubleshooting-failed-jms-messages-mdx",
    "path": "/troubleshooting/failed_jms_messages/",
    "result": {"pageContext":{"frontmatter":{"title":"Handling failed JMS messages on the MQ dead message queue","description":"Handling failed JMS messages on the MQ dead message queue"},"relativePagePath":"/troubleshooting/failed_jms_messages.mdx","titleType":"page","MdxNode":{"id":"3e527a6f-633c-597d-8096-17d51e2b6db4","children":[],"parent":"2b7e7b38-18b1-5919-a01e-60fb3dd1374c","internal":{"content":"---\ntitle: Handling failed JMS messages on the MQ dead message queue\ndescription: Handling failed JMS messages on the MQ dead message queue\n---\n\n## Introduction\n\nIt would be unusual for JMS processing to fail; but, if messages do fail that is why we define retry counts and error and dead message queues.\nThere are broadly two contexts for JMS failures:\n\n* Message production: messages to MQ from Liberty.\n* Message consumption: message processing in Liberty for messages from MQ.\n\n## Message production failures\n\nIf the production of a JMS message fails, a Java exception is thrown in Liberty (shown in the application server logs), the transaction fails, and the message is never processed by MQ.\n\nFor example, if an MQ queue fills up you would see the following exception in the chain of stack. This points back to the issue in MQ and other related exceptions would identify the failing queue.\n\n```\ntraces in the WebSphere Liberty log files:\nCaused by: com.ibm.mq.MQException: JMSCMQ0001:\nIBM MQ call failed with compcode '2' ('MQCC_FAILED') reason '2053' ('MQRC_Q_FULL').\n```\n\n## Message consumption failures\n\nThe JMS configuration for IBM® Cúram Social Program Management (SPM) specifies a hierarchy of queues, from the normal queue, to an error queue, and finally to the dead message queue.\nFigure 1 illustrates this flow of JMS messages for SPM.\n\n![SPM on Kubernetes - Cúram JMS queue message flow](../../images/curam_jmsqueue_message_flow.png)\n<Caption>\n\n*Figure 1:* Cúram JMS queue message flow\n\n</Caption>\n\nJMS messages are usually handled within one of the three queues: `DPEnactment`, `WorkflowEnactment`, or `WorkflowActivity`; and, if necessary, are given up to five retry attempts, which is a configurable value in MQ `(BOTHRESH(5))`.\n\nShould the message not succeed at that point it is routed to its associated error or exception queue as shown in the diagram: `DPEnactment` to `DPError`, and `WorkflowEnactment` and `WorkflowActivity` to `WorkflowError`.\n\nAt this point, SPM or custom error processing can take over, depending on the message type and your configuration.  Similarly, the error queues are defined to retry up to five times.\n\nShould the error queue processing fail the message is finally routed to the `CuramDeadMessageQueue`, specified as the MQ dead letter queue.\nThe message will stay until you either resend it to its originating queue or delete it, and how to do that is the subject of this document.\n\nNormally your only concern with respect to JMS message failures is what ends up in the dead message queue, since that represents work that should be processed but wasn’t.\n\nHowever, there are some error queue interventions that may be necessary, which are outside the scope of this document.\nFor instance, Cúram Express Rules processing will transfer messages routed to the JMS error queue to batch as discussed in [Dependency Manager deferred processing](https://www.ibm.com/docs/en/spm/8.0.0?topic=manager-dependency-deferred-processing).\n\nYou should monitor the dead message queue in MQ, `QN.CURAMDEADMESSAGEQUEUE`, to ensure that messages are not failing to be processed, which should also be evidenced by Java exceptions in the Liberty logs and a non-zero queue depth in MQ.\nFor instance, this MQSC command displays the current queue depth for the dead message queue:\n\n```\nDISPLAY QUEUE(QN.CURAMDEADMESSAGEQUEUE) CURDEPTH\n```\n\nThere are a number of options for processing messages from `QN.CURAMDEADMESSAGEQUEUE`, provided by two MQ commands:\n\n* The queue load and unload command: [dmpmqmsg](https://www.ibm.com/docs/en/ibm-mq/9.1?topic=reference-dmpmqmsg-queue-load-unload)\n* The run dead-letter queue handler command: [runmqdlq](https://www.ibm.com/docs/en/ibm-mq/9.1?topic=reference-runmqdlq-run-dead-letter-queue-handler)\n\nImportant points to remember:\n\n<InlineNotification kind=\"info\">\n\n**Note:** When processing messages from `QN.CURAMDEADMESSAGEQUEUE` you need to be aware of the original queue that the message was targeted to.\nThat is, messages from multiple queues can be routed to `QN.CURAMDEADMESSAGEQUEUE` and routing those messages incorrectly will result in additional errors. The dmpmqmsg command provides filtering options and runmqdlg provides a rules table.\n\n</InlineNotification>\n\n<InlineNotification kind=\"info\">\n\nMessages are processed as they arrive, with the exception of the dead message queue.\nThat is, if you load messages from `QN.CURAMDEADMESSAGEQUEUE` into another queue and they fail again you can end up with duplicate messages, which can be confusing and error-prone to resolve.\nTherefore, it is recommended that you clear the dead message queue before processing its contents.\n\n</InlineNotification>\n\n### Dead Letter Messages example\n\nThis is a simple example illustrating the processing of dead letter messages:\n\n* Unload the messages from the queue; for example, from the `QN.CURAMDEADMESSAGEQUEUE` queue in Queue Manager QM1:\n\n    ```\n    $MQ_INSTALLATION_PATH/dmpmqmsg -m QM1 -i QN.CURAMDEADMESSAGEQUEUE -f dead_messages.mq\n    ```\n\n    This command would copy all the message on the queue into the specified file.\n\n    Replacing the `-i` option with `-I` would move the messages, leaving the queue empty.\n\n    To selectively process messages you can use the search option (-s) to selectively process messages; for instance\n\n    ```\n    $MQ_INSTALLATION_PATH/dmpmqmsg -m QM1 -I QN.CURAMDEADMESSAGEQUEUE -s QN.DPENACTMENT  -dA -f DPENACTMENT.mq\n    $MQ_INSTALLATION_PATH/dmpmqmsg -m QM1 -I QN.CURAMDEADMESSAGEQUEUE -s QN.WORKFLOWENACTMENT  -dA -f WORKFLOWENACTMENT.mq\n    ```\n\n    This would move the messages from the `QN.CURAMDEADMESSAGEQUEUE` into the specified files based on the filter.\n    You could then use the `DISPLAY QUEUE(QN.CURAMDEADMESSAGEQUEUE) CURDEPTH` command to confirm that all messages are accounted for.\n\n* If you didn’t use the `-I` option (or, optionally the `-p` option) when running the dmpmqmsg command to clear the dead message queue as its contents were processed you should do that now using the MQSC command; for instance:\n\n    ```\n    CLEAR QLOCAL (QN.CURAMDEADMESSAGEQUEUE)\n    ```\n\n* Once the original problem is resolved that caused the errors, reload the messages.  For instance, using the previous filtered example:\n\n    ```\n    $MQ_INSTALLATION_PATH/dmpmqmsg -m QM1 -o QN.DPENACTMENT -f DPENACTMENT.mq\n    $MQ_INSTALLATION_PATH/dmpmqmsg -m QM1 -I QN.WORKFLOWENACTMENT -f WORKFLOWENACTMENT.mq\n    ```\n","type":"Mdx","contentDigest":"f469947f4f14c50a935aadc8fe13fc32","owner":"gatsby-plugin-mdx","counter":185},"frontmatter":{"title":"Handling failed JMS messages on the MQ dead message queue","description":"Handling failed JMS messages on the MQ dead message queue"},"exports":{},"rawBody":"---\ntitle: Handling failed JMS messages on the MQ dead message queue\ndescription: Handling failed JMS messages on the MQ dead message queue\n---\n\n## Introduction\n\nIt would be unusual for JMS processing to fail; but, if messages do fail that is why we define retry counts and error and dead message queues.\nThere are broadly two contexts for JMS failures:\n\n* Message production: messages to MQ from Liberty.\n* Message consumption: message processing in Liberty for messages from MQ.\n\n## Message production failures\n\nIf the production of a JMS message fails, a Java exception is thrown in Liberty (shown in the application server logs), the transaction fails, and the message is never processed by MQ.\n\nFor example, if an MQ queue fills up you would see the following exception in the chain of stack. This points back to the issue in MQ and other related exceptions would identify the failing queue.\n\n```\ntraces in the WebSphere Liberty log files:\nCaused by: com.ibm.mq.MQException: JMSCMQ0001:\nIBM MQ call failed with compcode '2' ('MQCC_FAILED') reason '2053' ('MQRC_Q_FULL').\n```\n\n## Message consumption failures\n\nThe JMS configuration for IBM® Cúram Social Program Management (SPM) specifies a hierarchy of queues, from the normal queue, to an error queue, and finally to the dead message queue.\nFigure 1 illustrates this flow of JMS messages for SPM.\n\n![SPM on Kubernetes - Cúram JMS queue message flow](../../images/curam_jmsqueue_message_flow.png)\n<Caption>\n\n*Figure 1:* Cúram JMS queue message flow\n\n</Caption>\n\nJMS messages are usually handled within one of the three queues: `DPEnactment`, `WorkflowEnactment`, or `WorkflowActivity`; and, if necessary, are given up to five retry attempts, which is a configurable value in MQ `(BOTHRESH(5))`.\n\nShould the message not succeed at that point it is routed to its associated error or exception queue as shown in the diagram: `DPEnactment` to `DPError`, and `WorkflowEnactment` and `WorkflowActivity` to `WorkflowError`.\n\nAt this point, SPM or custom error processing can take over, depending on the message type and your configuration.  Similarly, the error queues are defined to retry up to five times.\n\nShould the error queue processing fail the message is finally routed to the `CuramDeadMessageQueue`, specified as the MQ dead letter queue.\nThe message will stay until you either resend it to its originating queue or delete it, and how to do that is the subject of this document.\n\nNormally your only concern with respect to JMS message failures is what ends up in the dead message queue, since that represents work that should be processed but wasn’t.\n\nHowever, there are some error queue interventions that may be necessary, which are outside the scope of this document.\nFor instance, Cúram Express Rules processing will transfer messages routed to the JMS error queue to batch as discussed in [Dependency Manager deferred processing](https://www.ibm.com/docs/en/spm/8.0.0?topic=manager-dependency-deferred-processing).\n\nYou should monitor the dead message queue in MQ, `QN.CURAMDEADMESSAGEQUEUE`, to ensure that messages are not failing to be processed, which should also be evidenced by Java exceptions in the Liberty logs and a non-zero queue depth in MQ.\nFor instance, this MQSC command displays the current queue depth for the dead message queue:\n\n```\nDISPLAY QUEUE(QN.CURAMDEADMESSAGEQUEUE) CURDEPTH\n```\n\nThere are a number of options for processing messages from `QN.CURAMDEADMESSAGEQUEUE`, provided by two MQ commands:\n\n* The queue load and unload command: [dmpmqmsg](https://www.ibm.com/docs/en/ibm-mq/9.1?topic=reference-dmpmqmsg-queue-load-unload)\n* The run dead-letter queue handler command: [runmqdlq](https://www.ibm.com/docs/en/ibm-mq/9.1?topic=reference-runmqdlq-run-dead-letter-queue-handler)\n\nImportant points to remember:\n\n<InlineNotification kind=\"info\">\n\n**Note:** When processing messages from `QN.CURAMDEADMESSAGEQUEUE` you need to be aware of the original queue that the message was targeted to.\nThat is, messages from multiple queues can be routed to `QN.CURAMDEADMESSAGEQUEUE` and routing those messages incorrectly will result in additional errors. The dmpmqmsg command provides filtering options and runmqdlg provides a rules table.\n\n</InlineNotification>\n\n<InlineNotification kind=\"info\">\n\nMessages are processed as they arrive, with the exception of the dead message queue.\nThat is, if you load messages from `QN.CURAMDEADMESSAGEQUEUE` into another queue and they fail again you can end up with duplicate messages, which can be confusing and error-prone to resolve.\nTherefore, it is recommended that you clear the dead message queue before processing its contents.\n\n</InlineNotification>\n\n### Dead Letter Messages example\n\nThis is a simple example illustrating the processing of dead letter messages:\n\n* Unload the messages from the queue; for example, from the `QN.CURAMDEADMESSAGEQUEUE` queue in Queue Manager QM1:\n\n    ```\n    $MQ_INSTALLATION_PATH/dmpmqmsg -m QM1 -i QN.CURAMDEADMESSAGEQUEUE -f dead_messages.mq\n    ```\n\n    This command would copy all the message on the queue into the specified file.\n\n    Replacing the `-i` option with `-I` would move the messages, leaving the queue empty.\n\n    To selectively process messages you can use the search option (-s) to selectively process messages; for instance\n\n    ```\n    $MQ_INSTALLATION_PATH/dmpmqmsg -m QM1 -I QN.CURAMDEADMESSAGEQUEUE -s QN.DPENACTMENT  -dA -f DPENACTMENT.mq\n    $MQ_INSTALLATION_PATH/dmpmqmsg -m QM1 -I QN.CURAMDEADMESSAGEQUEUE -s QN.WORKFLOWENACTMENT  -dA -f WORKFLOWENACTMENT.mq\n    ```\n\n    This would move the messages from the `QN.CURAMDEADMESSAGEQUEUE` into the specified files based on the filter.\n    You could then use the `DISPLAY QUEUE(QN.CURAMDEADMESSAGEQUEUE) CURDEPTH` command to confirm that all messages are accounted for.\n\n* If you didn’t use the `-I` option (or, optionally the `-p` option) when running the dmpmqmsg command to clear the dead message queue as its contents were processed you should do that now using the MQSC command; for instance:\n\n    ```\n    CLEAR QLOCAL (QN.CURAMDEADMESSAGEQUEUE)\n    ```\n\n* Once the original problem is resolved that caused the errors, reload the messages.  For instance, using the previous filtered example:\n\n    ```\n    $MQ_INSTALLATION_PATH/dmpmqmsg -m QM1 -o QN.DPENACTMENT -f DPENACTMENT.mq\n    $MQ_INSTALLATION_PATH/dmpmqmsg -m QM1 -I QN.WORKFLOWENACTMENT -f WORKFLOWENACTMENT.mq\n    ```\n","fileAbsolutePath":"/home/travis/build/IBM/spm-kubernetes/src/pages/troubleshooting/failed_jms_messages.mdx"}}},
    "staticQueryHashes": ["1364590287","137577622","2102389209","2456312558","2610115429","2746626797","3037994772","768070550"]}