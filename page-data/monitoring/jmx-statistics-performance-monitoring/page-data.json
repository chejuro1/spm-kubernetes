{
    "componentChunkName": "component---src-pages-monitoring-jmx-statistics-performance-monitoring-mdx",
    "path": "/monitoring/jmx-statistics-performance-monitoring/",
    "result": {"pageContext":{"frontmatter":{"title":"Monitoring performance using JMX statistics","description":"Monitoring performance using JMX statistics"},"relativePagePath":"/monitoring/jmx-statistics-performance-monitoring.mdx","titleType":"page","MdxNode":{"id":"a5c68700-4c29-5804-b04f-0d0b6cad4129","children":[],"parent":"22f30fa1-b394-586f-b279-f5b1ed386b7a","internal":{"content":"---\ntitle: Monitoring performance using JMX statistics\ndescription: Monitoring performance using JMX statistics\n---\n## What is Cúram JMX?\n\nCúram JMX statistics provides operational data from a running IBM® Cúram Social Program Management (SPM) application.\nJMX statistics for use with a traditional application server are documented\nin this [IBM Documentation](https://www.ibm.com/docs/en/spm/8.0.0?topic=management-configuring-jmx-statistics) page.\n\n### Cúram JMX Kubernetes Limitations\n\nCúram JMX statistics behave similarly in Kubernetes, but have the following limitations:\n\n* Access by using the [SPM Administration Application](https://www.ibm.com/docs/en/spm/8.0.0?topic=statistics-using-administration-application)\nis not supported because:\n  * Not all pods have the requisite SPM client installed, which means JMS performance is unavailable using this access mechanism.\n  * The reverse proxy nature of Kubernetes means that even for the pods with clients installed, identifying the correct target server would be difficult.\n\nTherefore, for Kubernetes you are restricted to using the timer-based access method, for more information, see [Using the JMX Timer](https://www.ibm.com/docs/en/spm/8.0.0?topic=statistics-using-jmx-timer).\n\n## Cúram JMX timer-based statistics on Kubernetes\n\nThis mechanism writes the JMX statistics periodically at a file system location. The advantage of this mechanism is that it can be used for collecting statistics from every server in an environment\n\nThe primary properties used to configure timer-based statistics are integrated into the Helm Charts.\n\nA prerequisite for using timer-based SPM JMX statistics is to override `global.apps.common.persistence.enabled=true`.\n\nYou must also consider the other persistence-related settings and configure them appropriately.\n\n### Cúram JMX statistics persisteance\n\nPersistence is required for timer-based statistics because the non-permanent nature of pods means that as they come and go, you might need statistics from an earlier execution.\n\nEnable timer-based JMX statistics with a `global.apps.common.persistence.jmxstats.enabled=true` override.\nOnce configured, the following SPM properties are added to the Liberty pod jvm.options files with the defaults shown:\n\n```shell\n-Dcuram.jmx.output_statistics_timer_enabled=true\n-Dcuram.jmx.output_statistics_timer_folder=/tmp/jmx/\n-Dcuram.jmx.output_statistics_timer_period=60000\n```\n\nYou can override the value of the timer period by using `global.apps.common.persistence.jmxstats.timerPeriod` where the value is specified as the\nnumber of milliseconds between each timer. For example, 60000 = 1 minute.\n\nInside the specified timer folder are the statistics XML files, named with a datetimestamp and pod name.\n\n__For example:__`202009171025363411@bugsbunny-apps-curam-producer-6c9bf7dc46-snw4w-1661122509.xml`\n\n## Considerations\n\n* The default of `1 minute` for the timer period might be too short because over an extended time, depending upon the amount of application activity, the persistent storage could be exhausted.\n  * Consider also the length of time a pod will run; if the timer period is too short, data since the last timer period is lost.\n* No timer-based statistics are generated until the first login or JMS message is processed.\n* Turn off statistics for running pods by editing the configmaps where `-Dcuram.jmx.output_statistics_timer_enabled=true` is set, changing the value to false, and restarting the pods.\nFor example:\n  * Use the `kubectl get configmaps` command to list all the configmaps.\n  * The configmaps you need to change are those named with `*-jvm-override-*` and the number and names of the configmaps vary depending on your configuration.\n  * For each configmap, use the `kubectl edit configmap` command to change the `curam.jmx.output_statistics_timer_enabled` setting to false.\n  * Use the `kubectl delete pod` command for each of the application producer and consumer pods that have a corresponding application name to the configmap.\n  * On restart the new pod no longer generates statistics files.\n* By default, statistics are accumulated over the life of a pod; therefore, the last file generated is a superset of all the other files for that pod, therefore and you should only need the latest file.\n  * There is a property to change this behavior so each period resets the statistics, but then you would have to address how to amalgamate the data and make sense of it; so,changing this is not recommended.\n* In support of EJB timers, IBM WebSphere Liberty dynamically creates three tables each time a pod starts; a `PART`, `PROP`, and `TASK` table.\n  * The amount of data in these tables is small; but, over time could result in a large number of these tables in your database.\n  * You should monitor these tables and drop those for pods that no longer exist.\n  * These tables are prefixed with `EJBTIMER_`, followed by the pod name. For example, for the bugsbunny-apps-curam-consumer deployment, the following three tables were created for a single pod:\n\n  ```\n    EJBTIMER_BUGSBUNNY_APPS_CURAM_CONSUMER_786586FD5F_BGMGWPART\n    EJBTIMER_BUGSBUNNY_APPS_CURAM_CONSUMER_786586FD5F_BGMGWPROP\n    EJBTIMER_BUGSBUNNY_APPS_CURAM_CONSUMER_786586FD5F_BGMGWTASK\n  ```\n\n  In the context of Kubernetes pods, if the JMX and Liberty metrics are being made available from the pods by the JMX Exporter to be scraped by Prometheus,\n  the following rules file may be employed to ensure that the metrics are surfaced and labelled appropriately.\n\n  [Example jmxExporter rules file](/resources/example_jmx_rules.yml)\n","type":"Mdx","contentDigest":"3c5ce3a67b2c4a3e86c489ed55c8eeac","owner":"gatsby-plugin-mdx","counter":171},"frontmatter":{"title":"Monitoring performance using JMX statistics","description":"Monitoring performance using JMX statistics"},"exports":{},"rawBody":"---\ntitle: Monitoring performance using JMX statistics\ndescription: Monitoring performance using JMX statistics\n---\n## What is Cúram JMX?\n\nCúram JMX statistics provides operational data from a running IBM® Cúram Social Program Management (SPM) application.\nJMX statistics for use with a traditional application server are documented\nin this [IBM Documentation](https://www.ibm.com/docs/en/spm/8.0.0?topic=management-configuring-jmx-statistics) page.\n\n### Cúram JMX Kubernetes Limitations\n\nCúram JMX statistics behave similarly in Kubernetes, but have the following limitations:\n\n* Access by using the [SPM Administration Application](https://www.ibm.com/docs/en/spm/8.0.0?topic=statistics-using-administration-application)\nis not supported because:\n  * Not all pods have the requisite SPM client installed, which means JMS performance is unavailable using this access mechanism.\n  * The reverse proxy nature of Kubernetes means that even for the pods with clients installed, identifying the correct target server would be difficult.\n\nTherefore, for Kubernetes you are restricted to using the timer-based access method, for more information, see [Using the JMX Timer](https://www.ibm.com/docs/en/spm/8.0.0?topic=statistics-using-jmx-timer).\n\n## Cúram JMX timer-based statistics on Kubernetes\n\nThis mechanism writes the JMX statistics periodically at a file system location. The advantage of this mechanism is that it can be used for collecting statistics from every server in an environment\n\nThe primary properties used to configure timer-based statistics are integrated into the Helm Charts.\n\nA prerequisite for using timer-based SPM JMX statistics is to override `global.apps.common.persistence.enabled=true`.\n\nYou must also consider the other persistence-related settings and configure them appropriately.\n\n### Cúram JMX statistics persisteance\n\nPersistence is required for timer-based statistics because the non-permanent nature of pods means that as they come and go, you might need statistics from an earlier execution.\n\nEnable timer-based JMX statistics with a `global.apps.common.persistence.jmxstats.enabled=true` override.\nOnce configured, the following SPM properties are added to the Liberty pod jvm.options files with the defaults shown:\n\n```shell\n-Dcuram.jmx.output_statistics_timer_enabled=true\n-Dcuram.jmx.output_statistics_timer_folder=/tmp/jmx/\n-Dcuram.jmx.output_statistics_timer_period=60000\n```\n\nYou can override the value of the timer period by using `global.apps.common.persistence.jmxstats.timerPeriod` where the value is specified as the\nnumber of milliseconds between each timer. For example, 60000 = 1 minute.\n\nInside the specified timer folder are the statistics XML files, named with a datetimestamp and pod name.\n\n__For example:__`202009171025363411@bugsbunny-apps-curam-producer-6c9bf7dc46-snw4w-1661122509.xml`\n\n## Considerations\n\n* The default of `1 minute` for the timer period might be too short because over an extended time, depending upon the amount of application activity, the persistent storage could be exhausted.\n  * Consider also the length of time a pod will run; if the timer period is too short, data since the last timer period is lost.\n* No timer-based statistics are generated until the first login or JMS message is processed.\n* Turn off statistics for running pods by editing the configmaps where `-Dcuram.jmx.output_statistics_timer_enabled=true` is set, changing the value to false, and restarting the pods.\nFor example:\n  * Use the `kubectl get configmaps` command to list all the configmaps.\n  * The configmaps you need to change are those named with `*-jvm-override-*` and the number and names of the configmaps vary depending on your configuration.\n  * For each configmap, use the `kubectl edit configmap` command to change the `curam.jmx.output_statistics_timer_enabled` setting to false.\n  * Use the `kubectl delete pod` command for each of the application producer and consumer pods that have a corresponding application name to the configmap.\n  * On restart the new pod no longer generates statistics files.\n* By default, statistics are accumulated over the life of a pod; therefore, the last file generated is a superset of all the other files for that pod, therefore and you should only need the latest file.\n  * There is a property to change this behavior so each period resets the statistics, but then you would have to address how to amalgamate the data and make sense of it; so,changing this is not recommended.\n* In support of EJB timers, IBM WebSphere Liberty dynamically creates three tables each time a pod starts; a `PART`, `PROP`, and `TASK` table.\n  * The amount of data in these tables is small; but, over time could result in a large number of these tables in your database.\n  * You should monitor these tables and drop those for pods that no longer exist.\n  * These tables are prefixed with `EJBTIMER_`, followed by the pod name. For example, for the bugsbunny-apps-curam-consumer deployment, the following three tables were created for a single pod:\n\n  ```\n    EJBTIMER_BUGSBUNNY_APPS_CURAM_CONSUMER_786586FD5F_BGMGWPART\n    EJBTIMER_BUGSBUNNY_APPS_CURAM_CONSUMER_786586FD5F_BGMGWPROP\n    EJBTIMER_BUGSBUNNY_APPS_CURAM_CONSUMER_786586FD5F_BGMGWTASK\n  ```\n\n  In the context of Kubernetes pods, if the JMX and Liberty metrics are being made available from the pods by the JMX Exporter to be scraped by Prometheus,\n  the following rules file may be employed to ensure that the metrics are surfaced and labelled appropriately.\n\n  [Example jmxExporter rules file](/resources/example_jmx_rules.yml)\n","fileAbsolutePath":"/home/travis/build/IBM/spm-kubernetes/src/pages/monitoring/jmx-statistics-performance-monitoring.mdx"}}},
    "staticQueryHashes": ["1364590287","137577622","2102389209","2456312558","2610115429","2746626797","3037994772","768070550"]}